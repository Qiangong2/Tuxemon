# -*- coding: utf-8 -*-
#
# Tuxemon
# Copyright (C) 2014, William Edwards <shadowapex@gmail.com>,
#                     Benjamin Bean <superman2k5@gmail.com>
#
# This file is part of Tuxemon.
#
# Tuxemon is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Tuxemon is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Tuxemon.  If not, see <http://www.gnu.org/licenses/>.
#
# Contributor(s):
#
# William Edwards <shadowapex@gmail.com>
#
#
# core.prepare Prepares the game environment.
#
"""This module initializes the display and creates dictionaries of resources.
It contains all the static and dynamic variables used throughout the game such
as display resolution, scale, etc.
"""
from __future__ import absolute_import

import logging
import os

import pygame as pg

from .components import config
from .platform import get_config_path

logger = logging.getLogger(__name__)

# Get the tuxemon base directory
BASEDIR = os.path.abspath(os.path.join(os.path.dirname(os.path.realpath(__file__)), "..")) + os.sep
if "library.zip" in BASEDIR:
    BASEDIR = os.path.abspath(os.path.join(BASEDIR, "..")) + os.sep

# Set up our config directory
CONFIG_PATH = get_config_path() + "/.tuxemon/"
try:
    os.makedirs(CONFIG_PATH)
except OSError:
    if not os.path.isdir(CONFIG_PATH):
        raise

# Create a copy of our default config if one does not exist in the home dir.
DEFAULT_FILE_PATH = BASEDIR + "tuxemon.cfg"
CONFIG_FILE_PATH = CONFIG_PATH + "tuxemon.cfg"

config.generate_default_config()

# Set up our custom campaign data directory.
USER_DATA_PATH = CONFIG_PATH + "data/"
if not os.path.isdir(USER_DATA_PATH):
    try:
        os.makedirs(USER_DATA_PATH)
    except OSError:
        if not os.path.isdir(USER_DATA_PATH):
            raise

# Read the "tuxemon.cfg" configuration file
CONFIG = config.TuxemonConfig(CONFIG_FILE_PATH)

# write it back to disk, updating it with new defaults
with open(CONFIG_FILE_PATH, 'w') as fp:
    CONFIG.cfg.write(fp)

# HEADLESSCONFIG = config.HeadlessConfig(CONFIG_FILE_PATH)

# Set up our data directory.
DATADIR = CONFIG.data

# Set up the screen size and caption
SCREEN_SIZE = CONFIG.resolution
ORIGINAL_CAPTION = "Tuxemon"

# Set the native tile size so we know how much to scale our maps
TILE_SIZE = [16, 16]  # 1 tile = 16 pixels

# Set the status icon size so we know how much to scale our menu icons
ICON_SIZE = [7, 7]

# Set the healthbar _color
HP_COLOR = (112, 248, 168)

# Set the XP bar _color
XP_COLOR = (248, 245, 71)

# Native resolution is similar to the old gameboy resolution. This is
# used for scaling.
NATIVE_RESOLUTION = [240, 160]

# If scaling is enabled, scale the tiles based on the resolution


if CONFIG.large_gui:
    SCALE = 2
    TILE_SIZE[0] *= SCALE
    TILE_SIZE[1] *= SCALE
elif CONFIG.scaling:
    SCALE = int((SCREEN_SIZE[0] / NATIVE_RESOLUTION[0]))
    TILE_SIZE[0] *= SCALE
    TILE_SIZE[1] *= SCALE
else:
    SCALE = 1

# Set up the saves directory
try:
    os.makedirs(CONFIG_PATH + "saves/")
except OSError:
    if not os.path.isdir(CONFIG_PATH + "saves/"):
        raise
SAVE_PATH = CONFIG_PATH + "saves/slot"
SAVE_METHOD = "JSON"
# SAVE_METHOD = "CBOR"

DEV_TOOLS = CONFIG.dev_tools


# Initialization of PyGame dependent systems.
def init():
    """The init function is used to initialize all PyGame dependent
    systems. This is primarily implemented to allow sphinx-apidoc
    to autogenerate documentation without initializing a PyGame
    window.

    :param None:

    :rtype: None
    :returns: None

    """

    # These variables will persist throughout the module so they
    # can be called externally. E.g. "prepare.SCREEN", etc.
    global SCREEN
    global SCREEN_RECT
    global JOYSTICKS
    global FONTS
    global MUSIC
    global SFX
    global GFX

    # initialize any platform-specific workarounds before pygame
    from tuxemon.core import platform
    platform.init()

    from .platform import android

    # Initialize PyGame and our screen surface.
    logger.debug("pygame init")
    pg.init()
    pg.display.set_caption(ORIGINAL_CAPTION)

    fullscreen = pg.FULLSCREEN if CONFIG.fullscreen else 0
    flags = pg.HWSURFACE | pg.DOUBLEBUF | fullscreen

    SCREEN = pg.display.set_mode(SCREEN_SIZE, flags)
    SCREEN_RECT = SCREEN.get_rect()

    # Disable the mouse cursor visibility
    pg.mouse.set_visible(False)

    # Set up any gamepads that we detect
    # The following event types will be generated by the joysticks:
    # JOYAXISMOTION JOYBALLMOTION JOYBUTTONDOWN JOYBUTTONUP JOYHATMOTION
    pg.joystick.init()
    JOYSTICKS = [pg.joystick.Joystick(x)
                 for x in range(pg.joystick.get_count())]

    # Initialize the individual joysticks themselves.
    for joystick in JOYSTICKS:
        joystick.init()

    # Map the appropriate android keys if we're on android
    if android:
        android.init()
        android.map_key(android.KEYCODE_MENU, pg.K_ESCAPE)
